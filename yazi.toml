# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[mgr]
ratio          = [ 1, 4, 3 ]
sort_by        = "alphabetical"
sort_sensitive = false
sort_reverse 	 = false
sort_dir_first = true
sort_translit  = false
linemode       = "none"
show_hidden    = false
show_symlink   = true
scrolloff      = 5
mouse_events   = [ "click", "scroll" ]
title_format   = "Yazi: {cwd}"

[preview]
wrap            = "no"
tab_size        = 2
max_width       = 600
max_height      = 900
cache_dir       = ""
image_delay     = 30
image_filter    = "triangle"
image_quality   = 75
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]

[which]
sort_by      	 = "none"
sort_sensitive = false
sort_reverse 	 = false
sort_translit  = false

[opener]
edit = [{ run = '$EDITOR "$@"', block = true, for = "unix" },
{ run = '''
  "hx %*"
''', block = true, for = "windows" },
	{ run = 'hx "$1"',             desc = "Open", for = "linux" },
	{ run = 'hx "$1"',             desc = "Open", for = "android" },  
]

open = [
	{ run = 'xdg-open "$1"',                desc = "Open", for = "linux" },
	{ run = 'open "$@"',                    desc = "Open", for = "macos" },
	{ run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
	{ run = 'termux-open "$1"',             desc = "Open", for = "android" },
]

reveal = [
	{ run = 'xdg-open "$(dirname "$1")"',           desc = "Reveal", for = "linux" },
	{ run = 'open -R "$1"',                         desc = "Reveal", for = "macos" },
	{ run = 'explorer /select,"%1"', orphan = true, desc = "Reveal", for = "windows" },
	{ run = 'termux-open "$(dirname "$1")"',        desc = "Reveal", for = "android" },
	{ run = '''clear; exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]

extract = [
	{ run = 'ya pub extract --list "$@"', desc = "Extract here", for = "unix" },
	{ run = 'ya pub extract --list %*',   desc = "Extract here", for = "windows" },
]
play = [
	{ run = 'xdg-open "$1"',                desc = "Play", for = "linux" },
	{ run = 'open "$@"',                    desc = "Play", for = "macos" },
	{ run = 'start "" "%1"', orphan = true, desc = "Play", for = "windows" },
	{ run = 'termux-open "$1"',             desc = "Play", for = "android" },
	{ run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
	{ run = 'mediainfo "%1" & pause', block = true, desc = "Show media info", for = "windows" },
]

[confirm]
# trash
trash_title 	= "Trash {n} selected file{s}?"
trash_origin	= "center"
trash_offset	= [ 0, 0, 70, 20 ]

# delete
delete_title 	= "Permanently delete {n} selected file{s}?"
delete_origin	= "center"
delete_offset	= [ 0, 0, 70, 20 ]

# overwrite
overwrite_title  = "Overwrite file?"
overwrite_content   = "Will overwrite the following file:"
overwrite_origin = "center"
overwrite_offset = [ 0, 0, 50, 15 ]

# quit
quit_title  = "Quit?"
quit_content   = "The following tasks are still running, are you sure you want to quit?"
quit_origin = "center"
quit_offset = [ 0, 0, 50, 15 ]

[pick]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 7 ]

[open]
rules = [

	# Archive
	{ mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", use = [ "extract", "reveal" ] },
	# JSON
	{ mime = "application/{json,ndjson}", use = [ "edit", "reveal" ] },
	{ mime = "*/javascript", use = [ "edit", "reveal" ] },
	# Empty file
	{ mime = "inode/empty", use = [ "edit", "reveal" ] },
  { name = "*/", use = [ "edit", "open", "reveal", ] },
  { mime = "text/*", use = [
    "edit",
    "reveal",
  ] },
  { mime = "image/*", use = [
    "open",
    "reveal",
  ] },
  { mime = "video/*", use = [
    "play",
    "reveal",
  ] },
  { mime = "audio/*", use = [
    "play",
    "reveal",
  ] },

  # PowerShell Scripts
  { mime = "text/x-powershell", use = [
    "edit",
    "reveal",
  ] },
  { mime = "application/x-powershell", use = [
    "edit",
    "reveal",
  ] },
  #
  # Batch Files
  { mime = "application/bat", use = [
    "edit",
    "reveal",
  ] },
  { mime = "application/x-bat", use = [
    "edit",
    "reveal",
  ] },
  { mime = "text/plain", name = "*.bat", use = [
    "edit",
    "reveal",
  ] },

  # Text Files
  { mime = "text/plain", use = [
    "edit",
    "reveal",
  ] },

  # .config Files
  { mime = "application/xml", name = "*.config", use = [
    "edit",
    "reveal",
  ] },

  # Makefiles
  { mime = "text/x-makefile", use = [
    "edit",
    "reveal",
  ] },
  { mime = "text/plain", name = "Makefile", use = [
    "edit",
    "reveal",
  ] },

  # Dockerfiles
  { mime = "text/x-dockerfile", use = [
    "edit",
    "reveal",
  ] },
  #
  # INI Files
  { mime = "text/plain", name = "*.ini", use = [
    "edit",
    "reveal",
  ] },

  # .env Files
  { mime = "text/plain", name = "*.env", use = [
    "edit",
    "reveal",
  ] },

  # Java Properties Files
  { mime = "text/x-java-properties", use = [
    "edit",
    "reveal",
  ] },

  # Apache Configuration Files (.htaccess)
  { mime = "text/plain", name = ".htaccess", use = [
    "edit",
    "reveal",
  ] },

  # Shell Profiles (like .bashrc, .zshrc)
  { mime = "application/x-shellscript", name = ".*rc", use = [
    "edit",
    "reveal",
  ] },

  # Git Configuration Files (.gitignore, .gitconfig)
  { mime = "text/plain", name = ".gitignore", use = [
    "edit",
    "reveal",
  ] },
  { mime = "text/plain", name = ".gitconfig", use = [
    "edit",
    "reveal",
  ] },

  # Vim Configuration Files (.vimrc)
  { mime = "text/plain", name = ".vimrc", use = [
    "edit",
    "reveal",
  ] },

  # C and C++
  { mime = "text/x-c", use = [
    "edit",
    "reveal",
  ] },
  { mime = "text/x-c++", use = [
    "edit",
    "reveal",
  ] },
  { mime = "text/x-chdr", use = [
    "edit",
    "reveal",
  ] },
  { mime = "text/x-c++hdr", use = [
    "edit",
    "reveal",
  ] },
  { mime = "text/x-csrc", use = [
    "edit",
    "reveal",
  ] },
  { mime = "text/x-c++src", use = [
    "edit",
    "reveal",
  ] },

  # C#
  { mime = "text/x-csharp", use = [
    "edit",
    "reveal",
  ] },

  # Java
  { mime = "text/x-java", use = [
    "edit",
    "reveal",
  ] },

  # Python
  { mime = "text/x-python", use = [
    "edit",
    "reveal",
  ] },

  # TypeScript
  { mime = "application/typescript", use = [
    "edit",
    "reveal",
  ] },

  # PHP
  { mime = "application/x-httpd-php", use = [
    "edit",
    "reveal",
  ] },

  # Ruby
  { mime = "application/x-ruby", use = [
    "edit",
    "reveal",
  ] },

  # Go
  { mime = "text/x-go", use = [
    "edit",
    "reveal",
  ] },

  # Rust
  { mime = "text/rust", use = [
    "edit",
    "reveal",
  ] },

  # Shell Scripts
  { mime = "application/x-shellscript", use = [
    "edit",
    "reveal",
  ] },

  # Perl
  { mime = "text/x-perl", use = [
    "edit",
    "reveal",
  ] },

  # Lua
  { mime = "text/x-lua", use = [
    "edit",
    "reveal",
  ] },

  # YAML
  { mime = "text/yaml", use = [
    "edit",
    "reveal",
  ] },

  # TOML
  { mime = "application/toml", use = [
    "edit",
    "reveal",
  ] },

  # JSON
  { mime = "application/json", use = [
    "edit",
    "reveal",
  ] },

  # XML
  { mime = "application/xml", use = [
    "edit",
    "reveal",
  ] },

  # HTML
  { mime = "text/html", use = [
    "edit",
    "reveal",
  ] },

  # CSS
  { mime = "text/css", use = [
    "edit",
    "reveal",
  ] },

  # Markdown
  { mime = "text/markdown", use = [
    "edit",
    "reveal",
  ] },

  # SQL
  { mime = "application/sql", use = [
    "edit",
    "reveal",
  ] },

  # Bash/Zsh
  { mime = "application/x-shellscript", use = [
    "edit",
    "reveal",
  ] },
  { mime = "*", use = [
    "open",
    "reveal",
  ] },

]

[tasks]
micro_workers = 5
macro_workers = 10
bizarre_retry = 5
image_alloc = 536870912 # 512MB
image_bound = [0, 0]

[plugins]
preload = []

[input]
# cd
cd_title = "Change directory:"
cd_origin = "top-center"
cd_offset = [0, 2, 50, 3]

# create
create_title = ["Create:", "Create (dir):"]
create_origin = "top-center"
create_offset = [0, 2, 50, 3]

# rename
rename_title = "Rename:"
rename_origin = "hovered"
rename_offset = [0, 1, 50, 3]

# trash
trash_title = "Move {n} selected file{s} to trash? (y/N)"
trash_origin = "top-center"
trash_offset = [0, 2, 50, 3]

# delete
delete_title = "Delete {n} selected file{s} permanently? (y/N)"
delete_origin = "top-center"
delete_offset = [0, 2, 50, 3]

# find
find_title = ["Find next:", "Find previous:"]
find_origin = "top-center"
find_offset = [0, 2, 50, 3]

# search
search_title = "Search:"
search_origin = "top-center"
search_offset = [0, 2, 50, 3]

# shell
shell_title = ["Shell:", "Shell (block):"]
shell_origin = "top-center"
shell_offset = [0, 2, 50, 3]

# overwrite
overwrite_title = "Overwrite an existing file? (y/N)"
overwrite_origin = "top-center"
overwrite_offset = [0, 2, 50, 3]

# quit
quit_title = "{n} task{s} running, sure to quit? (y/N)"
quit_origin = "top-center"
quit_offset = [0, 2, 50, 3]

#

[select]
open_title = "Open with:"
open_origin = "hovered"
open_offset = [0, 1, 50, 7]

[log]
enabled = true

[[plugin.prepend_fetchers]]
id   = "git"
name = "*"
run  = "git"

[[plugin.prepend_fetchers]]
id   = "git"
name = "*/"
run  = "git"
